#coding=utf-8

'''
同步IDA数据库信息到FEBuilderGBA的asmmap.
synchronize info in IDA database to FEBuilderGBA disassembler.
by laqieer
2018/02/24
'''

from idaapi import *
from idc import *
from ctypes import *
import os.path
import time

class sync_to_febuilder_disassembler_plugin_t(plugin_t):
	flags = 0
	wanted_name = "Sync to FEBuilderGBA"
	wanted_hotkey = "Alt-8"
	comment = "Share knowledge with FEBuilderGBA disassembler"
	help = "Created by laqieer.\nVisit https://github.com/laqieer for the latest version."
	
	def config(self):
		dialog = '''STARTITEM 0
Config

ROM Info
<##Generation##FE6:R>
<FE7:R>
<FE8:R>>
<##Version##JP:R>
<US:R>>
User Setting
<##Language##Japanese:R>
<English:R>
<Chinese:R>
<Germany:R>>
'''
		gen = c_int(0)
		ver = c_int(0)
		lan = c_int(0)
		while ask_form(dialog, byref(gen), byref(ver), byref(lan)) == 0:
			if ask_yn(0, "Are you really hacking GBA Fire Emblem?") == 0:
				self.n.altset(1, 2);
				break;
		self.n.altset(2, gen.value)
		self.n.altset(3, ver.value)
		self.n.altset(4, lan.value)
	
	def set_asmmap(self):
		#asmmap_path = ""
		asmmap_path = self.n.supval(1)
		#if asmmap_path == "":
		if asmmap_path is None:
		#if self.n.supstr(1, asmmap_path) == 0:
			febuilder_path = 0
			while febuilder_path == 0:
				febuilder_path = ask_file(0, "FEBuilderGBA.exe", "Where is FEBuilderGBA?")
			febuilder_dir, fn = os.path.split(febuilder_path)
			asmmap_path = febuilder_dir + r'\config\data\asmmap_addition_FE'
			gen = self.n.altval(2)
			#ver = self.n.altval(3)
			lan = self.n.altval(4)
			asmmap_path += str(gen + 6)
			if lan == 0:
				asmmap_path += '.txt'
			elif lan == 1:
				asmmap_path += '.en.txt'
			elif lan == 2:
				asmmap_path += '.zh.txt'
			elif lan == 3:
				asmmap_path += '.de.txt'
			else:
				asmmap_path += '.xx.txt'
			self.n.supset(1, asmmap_path)
		print(asmmap_path)
		self.asmmap = open(asmmap_path, 'w')
		while not self.asmmap:
			asmmap_path = 0
			while asmmap_path == 0:
				asmmap_path = ask_file(1, "asmmap_addition_FE*.txt", "Sync to asmmap")
			self.asmmap = open(asmmap_path, 'w')
		self.asmmap.write("// This file is generated by sync_to_nogba_debugger.idc and synchronous with \"" + get_idb_path() + "\".\n")
		self.asmmap.write("// Last sync at " + time.asctime() +"\n\n")
	
	def init(self):
		fn, ext = os.path.splitext(get_root_filename())
		if ext not in ('.gba', '.elf') : return PLUGIN_SKIP
		#if GetProcessorName() != 'ARM' : return PLUGIN_SKIP
		self.n = netnode("$ gba_fe_info", 0, True)
		if self.n.altval(1) == 1: return PLUGIN_OK
		if self.n.altval(1) == 2: return PLUGIN_SKIP
		# self.n.altset(1, AskYN(0, "Are you hacking GBA Fire Emblem?"))
		# if self.n.altval(1) == 0: return PLUGIN_SKIP
		if ask_yn(0, "Are you hacking GBA Fire Emblem?") == 0:
			self.n.altset(1, 2)
			return PLUGIN_SKIP
		self.n.altset(1, 1)
		self.config()
		return PLUGIN_OK
		
	def term(self):
		pass
		
	def run(self,arg):
		self.set_asmmap()
		pass
		self.asmmap.close()
		
	# def PLUGIN_ENTRY():
		# return sync_to_febuilder_disassembler_plugin_t()
		
def PLUGIN_ENTRY():
    return sync_to_febuilder_disassembler_plugin_t()